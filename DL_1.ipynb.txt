{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Mx29UWvvxg-x"
      },
      "outputs": [],
      "source": [
        "#Importing the necessary packages\n",
        "\n",
        "import tensorflow as tf #ML library\n",
        "import numpy as np #powerful library for numerical operations in python\n",
        "import matplotlib.pyplot as plt #Plotting library in python and provides various interface for creating various plots."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Generate some random data for linear regression\n",
        "\n",
        "np.random.seed(0) #This sets the random seed for NumPy's random number generator. Setting the seed ensures reproducibility,\n",
        "#meaning that if you run the code again, you'll get the same random numbers.\n",
        "X = np.random.rand(100,1) #This generates an array X with 100 random values between 0 and 1.\n",
        "#It represents the input variable in a linear regression model.\n",
        "y = 2 * X + 1 + 0.1 * np.random.randn(100,1)"
      ],
      "metadata": {
        "id": "8J-BwX0uzCUy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Define the linear regression model\n",
        "#This code defines a simple linear regression model using TensorFlow's Keras API.\n",
        "#It consists of one dense layer with one unit (neuron) and a linear activation function.\n",
        "model = tf.keras.Sequential([\n",
        "    tf.keras.layers.Input(shape=(1,), name='input_layer'),\n",
        "    tf.keras.layers.Dense(1, activation='linear', name='output_layer')\n",
        "])"
      ],
      "metadata": {
        "id": "QjcsXNEtzTq9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Compile the model\n",
        "#The optimizer is responsible for updating the model's weights\n",
        "#during training to minimize the specified loss.\n",
        "#an optimizer is an algorithm or a set of rules used to adjust the\n",
        "#parameters of a model in order to minimize the error or loss function.\n",
        "model.compile(optimizer='sgd', loss='mean_squared_error')"
      ],
      "metadata": {
        "id": "A5wkVb0azmfl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Train the model\n",
        "#the term \"verbose\" refers to the level of detail\n",
        "#or information that is displayed during the training process.\n",
        "model.fit(X, y, epochs=10, verbose=0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UzKtpF2-zusZ",
        "outputId": "d9506049-7571-4ca3-ce29-2e07ac5ce1d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7ba1964d34f0>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Make predictions\n",
        "#This code generates test data (X_test) evenly spaced between 0 and 1 and\n",
        "#uses the trained model to make predictions (y_pred) on this test data.\n",
        "X_test = np.linspace(0, 1, 100).reshape(-1,1)\n",
        "y_pred = model.predict(X_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D9U17xLiz3kE",
        "outputId": "e23d87e4-a1db-4648-def8-79c8895f1973"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4/4 [==============================] - 0s 3ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Plot the results\n",
        "# this code creates a scatter plot of the training data (X and y)\n",
        "#and overlays the learned linear regression model (y_pred) in red\n",
        "plt.scatter(X, y, label='Training data')\n",
        "plt.plot(X_test, y_pred, color='red', label='Linear Regression')\n",
        "plt.xlabel('X')\n",
        "plt.ylabel('y')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "MaB8lgcX0G8K",
        "outputId": "37e8fee1-b88b-4f4e-9508-2418f9ada530"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Pytorch Example\n",
        "\n",
        "#Importing the necessary packages\n",
        "\n",
        "import torch #popular open-source deep learning library\n",
        "import torch.nn as nn #Mdule for building and training neural networks\n",
        "import torch.optim as optim #provides collection of optimization algorithms used for trainig nn\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "QVS8x7Qn0jKB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Convert Numpy arrays to Pytorch tensors: data structures similar to numpy arrays with additinal features\n",
        "X_tensor = torch.from_numpy(X).float()\n",
        "y_tensor = torch.from_numpy(y).float()"
      ],
      "metadata": {
        "id": "SGui4mDB0wM6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the linear regression model\n",
        "class LinearRegression(nn.Module): #defines a class named LinearRegression that inherits from nn.Module, which is a base class for all neural network modules in PyTorch\n",
        "    def __init__(self, input_size, output_size): #class constructor or initializer method. It is called when an object of the class is created.\n",
        "        super(LinearRegression, self).__init__() #is called to invoke the constructor of the parent class\n",
        "        self.linear = nn.Linear(input_size, output_size)\n",
        "\n",
        "    def forward(self, x): #This method defines the forward pass of the model, specifying how input data x is processed to produce the output.\n",
        "        return self.linear(x)"
      ],
      "metadata": {
        "id": "IHkZSbNO0_CU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Instantiate the model, loss function, and optimizer\n",
        "model = LinearRegression(input_size=1, output_size=1)\n",
        "criterion = nn.MSELoss()\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.01)"
      ],
      "metadata": {
        "id": "om39JG5Q1fHj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model\n",
        "for epoch in range(100):\n",
        "    # Forward pass\n",
        "    y_pred = model(X_tensor)\n",
        "\n",
        "    # Compute the loss\n",
        "    loss = criterion(y_pred, y_tensor)\n",
        "\n",
        "    # Backward pass and optimization\n",
        "    optimizer.zero_grad()\n",
        "    loss.backward()\n",
        "    optimizer.step()"
      ],
      "metadata": {
        "id": "yT2hfaFQ1ymo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert the predictions back to NumPy arrays\n",
        "y_pred = model(X_tensor).detach().numpy()\n"
      ],
      "metadata": {
        "id": "hIyTxCkW2c5e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the results\n",
        "plt.scatter(X, y, label='Training data')\n",
        "plt.plot(X, y_pred, color='red', label='Linear regression')\n",
        "plt.xlabel('X')\n",
        "plt.ylabel('y')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "K8QBs3nx3EFU",
        "outputId": "47ebd908-99f1-4584-a706-48e997a992e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}